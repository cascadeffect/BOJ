# 1. 인접 행렬(Adjacency Matrix)
# - 2차원 배열에 그래프의 연결 관계를 표현하는 방식으로, 2차원 배열에 각 노드가 연결된 형태를 기록
# - 연결 되지 않은 노드끼리는 무한의 비용이라고 작성
#     0   1   2
#    -----------
# 0 | 0   7   5
# 1 | 7   0  무한
# 2 | 5  무한  0

# 무한의 비용 선언
INF = 999999999

# 2차원 리스트로 인접 행렬 표현
graph = [
  [0, 7, 5],
  [7, 0, INF],
  [5, INF, 0]
]

print(graph)

# 2. 인접 리스트(Adjacency List)
# 리스트로 그래프의 연결 관계를 표현하는 방식으로, 모든 노드에 연결된 노드에 대한 정보를 차례대로 연결하여 저장

# 행(row)이 3개인 2차원 리스트
graph = [[] for _ in range(3)]

# 노드 0에 연결된 노드 정보(노드, 거리) 저장
graph[0].append((1, 7))
graph[0].append((2, 5))

# 노드 1에 연결된 노드 정보(노드, 거리) 저장
graph[1].append((0, 7))

# 노드 2에 연결된 노드 정보(노드, 거리) 저장
graph[2].append((0, 5))

print(graph)


# 인접 행렬 vs 인접 리스트
# 1. 인접 행렬 방식은 모든 관계를 저장하므로 노드 개수가 많을수록 메모리가 불필요하게 낭비되는 반면,
#    인접 리스트 방식은 연결된 정보만을 저장하기 때문에 메모리를 효율적으로 사용한다.
# 2. 인접 리스트 방식은 연결된 데이터를 하나씩 확인해야 하기 때문에 인접 행렬 방식에 비해 특정한 두 노드 연결되어 있는지에 대한 정보를 얻는 속도가 느리다.
# 3. 특정한 노드와 연결된 모든 인접 노드를 순회해야 하는 경우, 인접 리스트 방식이 인접 행렬 방식에 비해 메모리 공간의 낭비가 적다.